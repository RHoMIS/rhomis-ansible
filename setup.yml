---
# Connect to an instance, install the necessary software, run tests, and deploy
- hosts: 'all'
  become: yes
  vars_files: 
    - vars.yml
  tasks:
#---------------------------------------------------------
# Install software
#---------------------------------------------------------
    - name: Run the equivalent of "apt-get update" as a separate step
      apt:
        update_cache: yes
      tags:
        - setup_authenticator
        - setup_api
        - update
        - start_mongodb
        - install_mongodb_package
        - install_packages
        - install_system_dependencies
        - install_r

    - name: Install reqired packages
      apt: name={{ item }} state=present
      with_items:
        - curl
        - wget
        - nginx
        - nodejs
        - npm
        - gnupg
        
      tags:
        - install_packages
        - setup_authenticator
        - setup_api
        - install_system_dependencies

    - name: Install R
      apt: name={{ item }} state=present
      with_items:
        - r-base
        - build-essential
        # Some necessary dependencies for some of the R packages
        - libcurl4-openssl-dev
        - libxml2-dev
        - libssl-dev 
        - libsasl2-dev
      tags:
        - install_r
        - setup_api

#-----------------------------------------------------------
# Install and Start MongoDb
#-----------------------------------------------------------
    - name: Import Public key
      apt_key:
        state: present
        url: https://www.mongodb.org/static/pgp/server-5.0.asc 
      tags:
        - apt_key
        - start_mongodb
        - install_packages
        - setup_authenticator
        - setup_api

       

    - name: Create a list file for MongoDB
      command: echo "deb [ arch=amd64,arm64 ] https://repo.mongodb.org/apt/ubuntu focal/mongodb-org/5.0 multiverse" | sudo tee /etc/apt/sources.list.d/mongodb-org-5.0.list
      tags:
        - start_mongodb
        - setup_authenticator
        - setup_api

 
    - name: Reload local packages
      command: sudo apt-get update
      tags:
        - start_mongodb
        - install_packages
        - setup_authenticator
        - setup_api


    - name: Add MongoDB repository
      apt_repository: repo='deb [ arch=amd64,arm64 ] https://repo.mongodb.org/apt/ubuntu focal/mongodb-org/5.0 multiverse' state=present
      tags:
        - install_mongodb_package
        - start_mongodb
        - install_packages
        - setup_authenticator
        - setup_api


    - name: Install the MongoDB packages  
      apt: name={{ item }} state=latest
      with_items:
        - mongodb-org
      tags:
        - install_mongodb_package
        - start_mongodb
        - install_packages
        - setup_authenticator
        - setup_api


    - name: Start MongoDB
      systemd: 
        state: started
        name: mongod
      tags:
        - start_app
        - start_mongodb
        - install_packages
        - setup_authenticator
        - setup_api

#--------------------------------------------------------
# Installing Scripts
#---------------------------------------------------------   
    - name: Clone authenticator api
      git:
        repo: '{{authenticator_repo}}'
        dest: '{{authenticator_dest}}'
      tags:
        - clone_authenticator
        - setup_authenticator

    - name: Clone data api
      git:
        repo: '{{api_repo}}'
        dest: '{{api_dest}}'
      tags:
        - clone_api
        - setup_api

    - name: Clone server R scripts
      git:
        repo: '{{server_r_scripts_repo}}'
        dest: '{{server_r_scripts_dest}}'
      when: 'inventory_hostname == api_staging_url|string'

      tags:
        - setup_api
        - clone_r_scripts

    - name: Install R packages
      command: "Rscript ./R/setup.R"
      args:
        chdir: "{{server_r_scripts_dest}}"
      when: 'inventory_hostname == api_staging_url|string'
      tags:
        - setup_api
        - clone_r_scripts

    - name: Copy authenticator environment file
      copy:
        src: ./config_files/authenticator/.env
        dest: '{{authenticator_dest}}/.env'
      tags:
        - copy_env
        - clone_authenticator
        - setup_authenticator
        - clone_authenticator_env
 
    - name: Copy api environment file
      copy:
        src: ./config_files/data_api/.env
        dest: '{{api_dest}}/.env'
      tags:
        - copy_env
        - clone_api
        - setup_api
    
    - name: Install packages based on package.json using the npm
      npm:
        path: '{{authenticator_dest}}' 
        state: present
      tags:
        - install_dependencies
        - setup_authenticator

    - name: Install packages based on package.json using the npm
      npm:
        path: '{{api_dest}}' 
        state: present
      tags:
        - install_dependencies
        - setup_api


    - name: install Pm2
      command: npm install pm2 -g
      tags:
        - install_dependencies
        - setup_api
        - setup_authenticator

    - name: Delete old authenticator pm2 instances
      become_user: ubuntu
      command: pm2 delete auth-api
      ignore_errors: yes
      tags:
        - start_app
        - start_authenticator



    - name: Start authenticator pm2 instance
      become_user: ubuntu
      # command: pm2 start /home/ubuntu/rhomis-authenticator/app.js --name node-app
      command: './node_modules/.bin/cross-env NODE_ENV=production pm2 start ./app.js --name "auth-api"'
      args:
        chdir: '{{authenticator_dest}}'
      tags:
        - start_authenticator

    


    - name: Delete old api pm2 instances
      become_user: ubuntu
      command: pm2 delete data-api
      ignore_errors: yes
      tags:
        - start_data_api



    - name: Start the application
      become_user: ubuntu
      # command: pm2 start /home/ubuntu/rhomis-authenticator/app.js --name node-app
      command: './node_modules/.bin/cross-env NODE_ENV=prod pm2 start ./app.js --name "data-api"'
      args:
        chdir: '{{api_dest}}'
      tags:
        - start_data_api



#----------------------------------------------------------
# Setting up NGINX and obtaining certificates
#----------------------------------------------------------

    - name : Install Python Package
      apt: 
        name: python3 
        state: latest
        update_cache: yes     
      tags:
        - setup_api
        - setup_authenticator
 
    - name : Install Let's Encrypt Package
      apt:
        name: "{{ certbot_package }}" 
        update_cache: yes
        state: latest
      tags:
        - setup_api
        - setup_authenticator

    - name: Create and Install Cert for Authenticor Staging Platform Using {{ certbot_plugin }} Plugin
      command: "certbot --{{ certbot_plugin }} -d  {{ inventory_hostname }} -m {{ email }} --agree-tos --noninteractive --redirect"
      tags:
        - setup_authenticator
        - setup_api

    - name: Renew certbot
      command: "certbot renew --cert-name {{inventory_hostname}}"
      tags:
        - renew_certificate

    - name: Renew certbot
      command: "certbot renew --cert-name {{inventory_hostname}} --dry-run"
      tags:
        - renew_certificate_dry_run
    
    - name: Copy nginx template
      copy:
        src: ./config_files/nginx_conf
        dest: /etc/nginx/sites-available/default
      tags:
        - copy_nginx_file
        - setup_authenticator
        - setup_api
            
    - name: Replace the example domain name
      replace:
        path: /etc/nginx/sites-available/default
        regexp: EXAMPLEDOMAIN
        replace: "{{inventory_hostname}}"

      tags:
        - substitute_domains
        - copy_nginx_file
        - setup_authenticator
        - setup_api

    - name: Replace the port name for the authenticator
      replace:
        path: /etc/nginx/sites-available/default
        regexp: EXAMPLEPORT
        replace: "3002"
      when: inventory_hostname == "{{authenticator_staging_url}}"
      tags:
        - substitute_domains
        - copy_nginx_file
        - setup_authenticator
    
    - name: Replace the port name
      replace:
        path: /etc/nginx/sites-available/default
        regexp: EXAMPLEPORT
        replace: "3001"
      when: inventory_hostname == "{{api_staging_url}}"


      tags:
        - substitute_domains
        - copy_nginx_file
        - setup_api



    - name: Restart nginx
      command: "systemctl restart nginx"
      tags:
        - restart_nginx
        - copy_nginx_file
        - setup_authenticator
        - setup_api